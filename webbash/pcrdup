#!/usr/bin/env python
## category General
## desc Find and mark PCR duplicates
## experimental
'''
For a BAM file, find and mark all possible PCR duplicates. This is meant to be
used primarily with paired-end reads, since these have better resolution to
verify that we care seeing a legitimate PCR duplicate and not just reads that
happen to start at the same location.

The orientation for paired-end reads is assumed to be "FR" (forward-reverse).

Note: The BAM file must be sorted in order to find duplicates. For paired-end
      reads, the the proper-pair (0x4) flag must be set and the isize/tlen
      field must be correctly calculated.
'''

import sys
import os
import datetime
import pysam
#from ngsutils.bam import bam_iter

def bam_iter(bam, quiet=False, show_ref_pos=False, ref=None, start=None, end=None, callback=None):
    '''
    >>> [x.qname for x in bam_iter(bam_open(os.path.join(os.path.dirname(__file__), 't', 'test.bam')), quiet=True)]
    ['A', 'B', 'E', 'C', 'D', 'F', 'Z']
    '''

    if os.path.exists('%s.bai' % bam.filename):
        # This is an indexed file, so it is ref sorted...
        # Meaning that we should show chrom:pos, instead of read names
        show_ref_pos = True

    eta = None

    if not ref:
        if not quiet and bam.filename:
            eta = ETA(os.stat(bam.filename).st_size)

        for read in bam:
            pos = bam.tell()
            bgz_offset = pos >> 16

            if not quiet and eta:
                if callback:
                    eta.print_status(bgz_offset, extra=callback(read))
                elif (show_ref_pos):
                    if read.tid > -1:
                        eta.print_status(bgz_offset, extra='%s:%s %s' % (bam.getrname(read.tid), read.pos, read.qname))
                    else:
                        eta.print_status(bgz_offset, extra='unmapped %s' % (read.qname))
                else:
                    eta.print_status(bgz_offset, extra='%s' % read.qname)

            yield read

    else:
        working_chrom = None
        if ref in bam.references:
            working_chrom = ref
        elif ref[0:3] == 'chr':
            # compensate for Ensembl vs UCSC ref naming
            if ref[3:] in bam.references:
                working_chrom = ref[3:]

        if not working_chrom:
            raise ValueError('Missing reference: %s' % ref)

        tid = bam.gettid(working_chrom)

        if not start:
            start = 0
        if not end:
            end = bam.lengths[tid]

        if not quiet and bam.filename:
            eta = ETA(end - start)

        for read in bam.fetch(working_chrom, start, end):
            if not quiet and eta:
                if callback:
                    eta.print_status(read.pos - start, extra=callback(read))
                else:
                    eta.print_status(read.pos - start, extra='%s:%s %s' % (bam.getrname(read.tid), read.pos, read.qname))

            yield read

    if eta:
        eta.done()
        

def eta_open_iter(fname, callback=None):
    f = open(fname)  # not using with to support 2.4
    _eta = ETA(os.stat(fname).st_size, fileobj=f)
    extra = ''
    for line in f:
        if callback:
            extra = callback()
        _eta.print_status(extra=extra)
        yield line
    _eta.done()
    f.close()


class _NoopETA(object):
    def __init__(self, *args, **kwargs):
        pass

    def done(self):
        pass

    def print_status(self, *args, **kwargs):
        pass


class _ETA(object):
    def __init__(self, total, modulo=None, fileobj=None, window=50, step=1, prog_bar_length=20, min_ms_between_updates=None):
        self.started = datetime.datetime.now()
        self.last = []
        self.total = total
        self.spinner = "|/-\\"
        self.spinner_pos = 0
        self.i = 0
        self.modulo = modulo

        try:
            fileobj.fileobj.tell()
            self.fileobj = fileobj.fileobj
        except:
            self.fileobj = fileobj

        self.last_len = 0
        self.step = step
        self.last_step = 0
        self.window = window
        self.prog_bar_length = prog_bar_length
        
        if min_ms_between_updates is not None:
            self.min_ms_between_updates = min_ms_between_updates  # in milliseconds
        elif sys.stderr.isatty():
            self.min_ms_between_updates = 200
        else:
            self.min_ms_between_updates = 10000

        self._last_update = 0
        self._started = 0

    def pct(self, current):
        if current < self.total:
            return float(current) / self.total
        return 1

    def ave_remaining(self, current, elapsed_sec):
        if len(self.last) > self.window:
            self.last = self.last[-self.window:]
        rem = self.remaining(current, elapsed_sec)
        if rem:
            self.last.append(rem)

        acc = 0.0
        for p in self.last:
            acc += p

        if len(self.last) > 0:
            return acc / len(self.last)
        else:
            return None

    def remaining(self, current, elapsed_sec):
        # elapsed = (datetime.datetime.now() - self.started).seconds
        pct = self.pct(current)
        if pct > 0:
            eta = elapsed_sec / self.pct(current)
        else:
            return None

        remaining = eta - elapsed_sec
        return remaining

    def pretty_time(self, secs):
        if secs is None:
            return ""

        if secs > 60:
            mins, secs = divmod(secs, 60)
            if mins > 60:
                hours, mins = divmod(mins, 60)
            else:
                hours = 0
        else:
            mins = 0
            hours = 0

        if hours:
            s = "%d:%02d:%02d" % (hours, mins, secs)
        elif mins:
            s = "%d:%02d" % (mins, secs)
        else:
            s = "0:%02d" % secs

        return s

    def done(self, overwrite=True):
        if overwrite:
            sys.stderr.write('\r')
            sys.stderr.write(' ' * self.last_len)
            sys.stderr.write('\b' * self.last_len)

        elapsed = (datetime.datetime.now() - self.started).seconds
        sys.stderr.write("Done! (%s)\n" % self.pretty_time(elapsed))
        sys.stderr.flush()

    def print_status(self, current=None, extra='', overwrite=True):
        self.i += 1
        if self.modulo and self.i % self.modulo > 0:
            return

        now = datetime.datetime.now()

        if self._last_update:
            elapsed = (now - self._last_update)
            millis = (elapsed.seconds * 1000) + (elapsed.microseconds / 1000)
            if millis < self.min_ms_between_updates:
                return

        self._last_update = now

        if not self._started:
            self._started = now
            elapsed_sec = 0
        else:
            td = now - self.started
            elapsed_sec = (td.days * 86400) + td.seconds

        if current is None:
            if self.fileobj:
                current = self.fileobj.tell()
            else:
                current = self.last_step + self.step

        self.last_step = current

        if overwrite:
            sys.stderr.write("\r")
            if self.last_len:
                sys.stderr.write(' ' * self.last_len)
            sys.stderr.write("\r")

        if extra:
            extra = " | %s" % extra

        if self.prog_bar_length > 0:
            pct_current = self.pct(current)
            completed = int(self.prog_bar_length * pct_current)
            remaining = self.prog_bar_length - completed
            prog_bar = '[%s>%s] ' % ('=' * completed, ' ' * (remaining - 1))
        else:
            prog_bar = ''

        line = "%6.1f%% %s %s %sETA: %s%s" % (pct_current * 100,
                                         self.spinner[self.spinner_pos],
                                         self.pretty_time(elapsed_sec),
                                         prog_bar,
                                         self.pretty_time(self.ave_remaining(current, elapsed_sec)),
                                         extra)
        width, height = getTerminalSize()
        if len(line) > width:
            line = line[:width]
        sys.stderr.write(line)

        if not overwrite:
            sys.stderr.write('\n')
        else:
            self.last_len = len(line)

        self.spinner_pos += 1
        if self.spinner_pos > 3:
            self.spinner_pos = 0
        sys.stderr.flush()

#
# getTerminalSize from StackOverflow:
# http://stackoverflow.com/questions/566746/how-to-get-console-window-width-in-python

if 'HIDE_ETA' in os.environ:
    ETA = _NoopETA
elif not sys.stderr.isatty() and 'SHOW_ETA' not in os.environ:
    ETA = _NoopETA
else:
    ETA = _ETA

def getTerminalSize():
    def ioctl_GWINSZ(fd):
        try:
            import fcntl
            import termios
            import struct
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,
        '1234'))
        except:
            return None
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)

    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass

    if not cr:
        try:
            cr = (os.environ['LINES'], os.environ['COLUMNS'])
        except:
            cr = (25, 80)

    return int(cr[1]), int(cr[0])



def usage(msg=None):
    if msg:
        sys.stdout.write('%s\n\n' % msg)
    sys.stdout.write(__doc__)
    sys.stdout.write('''\
Usage: bamutils pcrdup {options} infile.bam

Options:
    -frag                The reads are single-end fragments, so mark PCR
                         duplicated based only on the location of the read 
                         (not-recommended)

    -bam filename        Output BAM file with PCR duplicates marked

    -counts filename     Output of the number of reads at each position 

                         Note: this is actually the number of duplicate reads
                         at each position. If a position has multiple reads
                         mapped to it, but they are not pcr duplicates, then
                         there each will be reported separately.

    You must set either -bam or -counts (or both).

''')

    sys.exit(1)


def __flush_cur_reads(cur_reads, outbam, inbam, countfile=None):
    if cur_reads:
        for k in cur_reads:
            count = 0

            for i, (mapq, idx, r) in enumerate(sorted(cur_reads[k])[::-1]):
                count += 1
                if i > 0:
                    r.is_duplicate = True
                if outbam:
                    outbam.write(r)

            if countfile:
                countfile.write('%s\t%s\t%s\t%s\n' % (inbam.references[k[0]], k[1], k[2], count))


def pcrdup_mark(inbam, outbam, fragment=False, countfile=None):
    cur_pos = None
    cur_reads = {}

    total = 0
    unique = 0
    duplicates = 0

    dup_list = set()

    def callback(read):
        return '%s, %s, %s - %s' % (total, unique, duplicates, read.qname)

    for read in bam_iter(bamfile, callback=callback):
        if not read.is_paired or read.is_read1:
            total += 1

        if read.is_unmapped:
            __flush_cur_reads(cur_reads, outbam, inbam, countfile)
            if outbam:
                outbam.write(read)
            continue

        start_pos = (read.tid, read.pos)

        if fragment:
            dup_pos = (read.tid, read.pos, '')
        else:
            # isize is the insert length, which if this is the first read, will
            # be the right most part of the second read. If the ends of the reads
            # are trimmed for QC reasons, only the 5' pos of the first read and the 3'
            # pos of the second read will be accurate.
            
            dup_pos = (read.tid, read.pos, read.isize)

        if not cur_pos or start_pos != cur_pos:
            __flush_cur_reads(cur_reads, outbam, inbam, countfile)

            cur_pos = start_pos
            cur_reads = {}
            idx = 0

        if not fragment and (read.mate_is_unmapped or not read.is_paired or not read.is_proper_pair or read.isize < 0):
            # this is a paired file, but the mate isn't paired or proper or mapped
            # just write it out, no flags to set.

            if read.qname in dup_list:
                read.is_duplicate = True
                dup_list.remove(read.qname)

            if outbam:
                outbam.write(read)
        elif dup_pos in cur_reads:
            duplicates += 1
            if not fragment:
                dup_list.add(read.qname)
            cur_reads[dup_pos].append((read.mapq, -idx, read))
        else:
            unique += 1
            cur_reads[dup_pos] = [(read.mapq, -idx, read), ]

        idx += 1

    __flush_cur_reads(cur_reads, outbam, inbam, countfile)

    sys.stdout.write('Total reads:\t%s\n' % total)
    sys.stdout.write('Unique reads:\t%s\n' % unique)
    sys.stdout.write('PCR duplicates:\t%s\n' % duplicates)

if __name__ == '__main__':
    infile = None
    outfile = None
    countfname = None
    fragment = False

    last = None

    for arg in sys.argv[1:]:
        if arg == '-h':
            usage()
        elif last == '-counts':
            countfname = arg
            last = None
        elif last == '-bam':
            outfile = arg
            last = None
        elif arg in ['-counts', '-bam']:
            last = arg
        elif arg == '-frag':
            fragment = True
        elif not infile:
            if os.path.exists(arg):
                infile = arg
            else:
                usage("%s doesn't exist!" % arg)
        elif not outfile:
            if not os.path.exists(arg):
                outfile = arg
            else:
                usage("%s exists! Not overwriting file." % arg)

    if not infile or not (outfile or countfname):
        usage()

    bamfile = pysam.Samfile(infile, "rb")
    bamout = None
    if outfile:
        bamout = pysam.Samfile(outfile, "wb", template=bamfile)

    if countfname:
        countfile = open(countfname, 'w')
    else:
        countfile = None

    pcrdup_mark(bamfile, bamout, fragment, countfile)

    bamfile.close()
    if bamout:
        bamout.close()
    if countfile:
        countfile.close()
