#!/usr/bin/Rscript

#Source: https://mp.weixin.qq.com/s?__biz=MzU5MDU5NTIzMQ==&mid=2247484908&idx=1&sn=05be98dca68d12df868fe13385fb4480&chksm=fe3a901cc94d190a943bd6a920f88074ec5eae3b9589ff74548e525f903639873a84158192dc&scene=21#wechat_redirect
#基因组圈图绘制初探:circlize

#2.作图规则
#绘制圈图的规则很简单，即“初始化布局>>创建轨道>>添加图形>>创建轨道>>添加图形>>......>>清除”

#3. 绘图测试

install.packages("circlize")
library(circlize)

head (sdata)

#A tibble: 6x10
#carat	cut	color	clarity	depth	table	price	x	y	z
#<dbl>	<ord>	<ord>	<ord>	<dbl>	<dbl>	<int>	<dbl>	<dbl>	<dbl>
#1.02	Good	G	VS2	63.8	59	6080	6.34	6.27	4.02
#0.31	Ideal	F	VVS1	61.9	53.5	882	4.36	4.39	2.71
#0.6	Premium	D	SI2	61.3	61	1428	5.46	5.4	3.33
#0.41	Ideal	E	IF	62.1	54	1419	4.75	4.81	2.97
#0.72	Very Good	H	VS1	62.2	54	2877	5.74	5.76	3.57
#1.2	Ideal	F	VS2	62.6	56	8486	6.78	6.73	4.23

#绘制圈图，需要有一个分类变量，比如说染色体序号，我这里使用color变量，它包括7种类型D,E,F,G,H,I,J。然后需要数值表示x和y，这里使用数据中的x和y。
#设置轨道的高度为0.1。因为圈图中，圆的半径默认为1，所以这个轨道占据了半径的10%。

circos.par(track.height = 0.1)

#初始化圈图布局，根据每个类别中x轴上数据范围，将圆划分扇区。

circos.initialize(factors = sdata$color, x = sdata$x)

#创建第一个轨道,这时候需要指定y轴的数据。

circos.track(factors = sdata$color, y = sdata$y,
             panel.fun = function(x,y){
              circos.text(CELL_META$xcenter,CELL_META$cell.ylim[2] + uy(5,'mm'),
                          CELL_META$sector.index)
               circos.axis(labels.cex = 0.6)
             })

#添加图形，在每个扇区内绘制x和y的点；

col <- rainbow(7)
circos.trackPoints(sdata$color, sdata$x, sdata$y, col = col, pch = 16, cex = 0.5)

#给I的两边打上标签；

circos.text(4, 14.5, "left", sector.index = "I", track.index = 1) #在track 1中的标记为I的cell里添加text
circos.text(8.5, 14.5, "right", sector.index = "I")

#然后绘制第二个轨道；这一圈我们绘制直方图，circos.trackHist是个高级函数，可以创建一个新的轨道。

bg.col <- topo.colors(7)
circos.trackHist(sdata$color, sdata$x,bin.size = 0.1, bg.col = bg.col, col = "red")

#bin.size设置直方图的条宽，bg.col指的是背景色，col设定直方图的颜色。
#接下来画第三个轨道，这个轨道我们来画折线图。


circos.track(factors = sdata$color,x = sdata$x,y = sdata$y,
             panel.fun = function(x,y){
               index = sample(length(x),20)
               x2 = x[index]
               y2 = y[index]
               od = order(x2)
               circos.lines(x2[od],y2[od],col = 'green')
             })

#对于之前创建的轨道，我们还可以回去调节图形，这时用到circos.update函数。比如我们回到第二轨道，更新“I”扇区的图形。但是它不能更改单元格中xlim，ylim等位置相关的设置。

circos.update(sector.index = 'I', track.index = 2, bg.col = 'red', bg.border = 'blue')
circos.points(x = c(4.2,8.2), y = c(5,5), col = 'green')
circos.text(CELL_META$xcenter,CELL_META$ycenter,'updated',col = 'blue')


#可以看到，我在第二圈的I扇区中换了一个红色背景，蓝色边框，两边画了绿色小点，中间写上“updated”。
#我们接着创建新轨道，虽然我们当前轨道跳到了第二轨道，但是新建轨道会自动在最里面创建。这次画个热图，用circos.rect函数

circos.track(ylim = c(0,1),
             panel.fun = function(x,y){
               xlim = CELL_META$xlim
               ylim = CELL_META$ylim
               breaks = seq(xlim[1],xlim[2],by = 0.1)
               n_breaks = length(breaks)
               circos.rect(breaks[-n_breaks],rep(ylim[1],n_breaks - 1),breaks[1],
                           rep(ylim[2],n_breaks -1),col = rand_color(n_breaks),border = NA)
             })

#在内圈，我们还可以添加链接或功能区，可以点对点，也可以点到区块或区块到区块的链接。
#点对点链接
circos.link('I',5,'J',7,h = 0.3)
#点对区块链接
circos.link('G',6,'F',c(4,5),col = 'yellow',border = 'green',lwd = 1.5,lty = 2)
#区块对区块链接
circos.link('H',c(4,9),'D',c(4.5,6.5),col = 'red',border = 'blue',h = 0.4)

#最后，我们需要重置图形参数和内部变量，这样就不会影响下一个绘图了。
circos.clear()











