#!/usr/bin/env Rscript

################# AUTHORS #########################
#  Fu-Hao Lu
#  Post-Doctoral Scientist in Micheal Bevan laboratory
#  Cell and Developmental Department, John Innes Centre
#  Norwich NR4 7UH, United Kingdom
#  E-mail: Fu-Hao.Lu@jic.ac.uk



is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1]) 


################# Requirements #########################
# optparse
#     install.packages("optparse")
#         OptionParser(usage = "usage: %prog [options]", option_list = list(),
#                      add_help_option = TRUE, prog = NULL, description = "",
#                      epilogue = "")
if(! require("optparse")) install.packages("optparse")
library(optparse)
if(! require("scatterplot3d")) install.packages("scatterplot3d")
if(! require("gmodels")) install.packages("gmodels")
library(scatterplot3d)
library(gmodels)


#注意，这个模块不用加上-h的flag，不然会报错
option_list = list(
    make_option(c("-f", "--file"), type="logical/integer/double/complex/character", default=NULL, 
              action = "store", dest=file, help="Input File[default= %default]", metavar="character"),
    make_option(c("--title"), type="character", default="bar", 
              action = "store", help="Title[default= %default]", metavar="character"),
    make_option(c("-b", "--bilv"), type="character", default="200", 
              action = "store", help="ratio[default= %default]", metavar="character"),
    make_option(c("--eps"), type="logical", default=FALSE, 
              action = "store", help="Output EPS [default= %default]", metavar="character"),
    make_option(c("--svg"), type="logical", default=TRUE, 
              action = "store", help="Output SVG [default= %default]", metavar="character"),
    make_option(c("--tif"), type="logical", default=FALSE, 
              action = "store", help="Output TIFF [default= %default]", metavar="character")
    make_option(c("--pdf"), type="logical", default=FALSE, 
              action = "store", help="Output TIFF [default= %default]", metavar="character")
  );

opt = parse_args(OptionParser(option_list=option_list, usage = "This Script is a test for arguments!"))

if (is.null(opt$f)){
	print_help(opt_parser)
	stop("Error: invalid input file", call.=FALSE)
}
if (is.null(opt$outtable)){opt$outtable=paste(opt$f,'.xls',sep='')}
if (is.null(opt$outpdf)){opt$outpdf=paste(opt$f,'.pdf',sep='')}


### BitMap
#bitmap(file = "test1.jpeg", type = "jpeg", res = 1200) plot(1:22, pch = 1:22, cex = 1:3, col = 1:5)
#dev.off()
#bmp(filename = "Rplot%03d.bmp", width = 480, height = 480, units = c("px", "cm"), pointsize = 12, bg = "white", res = NA, ..., family = "", restoreConsole = TRUE, type = c("cairo", "Xlib", "quartz"), antialias)

### EPS
#setEPS()
#postscript(OutEps, width=8, height=2, pointsize=10)
#postscript(file="heatmaps_in_r.eps", onefile=FALSE, horizontal=FALSE, width = 1000, height = 2000)
#dev.off()

### JPEG
#jpeg(filename = "Rplot%03d.jpeg", width = 480, height = 480, units = "px", pointsize = 12, quality = 75, bg = "white", res = NA, ..., family = "", restoreConsole = TRUE, type = c("cairo", "Xlib", "quartz"), antialias)
#dev.off()

### PDF
#pdf(file="myplot.pdf")
#dev.off()
###PDFs are 7x7 inches by default, and each new plot is on a new page. The size can be changed:
### 6x3 inches
#pdf("plots.pdf", width=6, height=3)
### 10x6 cm
pdf("plots.pdf", width=10/2.54, height=6/2.54)
###If you want to edit your file in a vector editor like Inkscape or Illustrator, some of the plotting point objects might look like letters instead of circles, squares, etc. To avoid this problem:
#pdf(?plots.pdf?, useDingbats=FALSE)

### PNG
### By default, the graphs are 480x480 pixels in size, at a resolution of 72 dpi (6.66x6.66 inches).
#png(file="myplot.png", bg="transparent", width=480, height=240, res=120)
#dev.off()
#png(filename = "Rplot%03d.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white", res = NA, ..., family = "", restoreConsole = TRUE, type = c("cairo", "cairo-png", "Xlib", "quartz"), antialias)

### PS
#postscript("a.ps")
#dev.off()


### SVG
#svg(filename=?Std_SVG.svg?, width=5, height=4, pointsize=12)
#dev.off()

### TIFF
#tiff(file = "C:/test1.tiff", res = 300, width = 2400, height = 2400, compression = "lzw")
#plot(1:22, pch = 1:22, cex = 1:3, col = 1:5)
#dev.off()
#tiff(filename = "Rplot%03d.tiff", width = 480, height = 480, units = "px", pointsize = 12, compression = c("none", "rle", "lzw", "jpeg", "zip", "lzw+p", "zip+p"), bg = "white", res = NA, ..., family = "Arial", restoreConsole = TRUE, type = c("cairo", "Xlib", "quartz"), antialias)
#tiff(filename = paste(args[1], ".tif", sep=""), width = 8, height = 8, units = "cm", pointsize = 12, compression = "lzw", bg = "white", res = 600, family = "Arial")

if (opt$svg) {
	svg(filename=paste(opt$p, ".svg", sep=""), width=5, height=4, pointsize=12)
	My.Plot
	dev.off()
}
if (opt$pdf) {
	pdf(file=paste(opt$p, ".pdf", sep=""))
	My.Plot
	dev.off()
}
if (opt$tif) {
	tiff(filename = paste(opt$p, ".tif", sep=""), width = 8, height = 8, units = "cm", pointsize = 12, compression = "lzw", bg = "white", res = 600, family = "Arial")
	My.Plot
	dev.off()
}
if (opt$eps) {
	setEPS()
	postscript(paste(opt$p, ".eps", sep=""), width=1, height=1, pointsize=10)
	My.Plot
	dev.off()
}



### 读取数据
data <- read.table(opt$f, header= T, row.names=1)
### 显示文件维度
dim(data)
### 显示文件前六行
head(data)

###	M1	M2	M3	M4	M5	M6	M7	M8	M9	M10
###GBP4 	6.59	5.22	3.69	3.93	4.52	9.30	8.98	7.65	8.66	7.41
###BCAT1	5.76	4.89	5.44	3.48	3.85	8.66	8.79	8.76	8.09	8.26
###CMPK2	9.56	4.54	3.99	5.61	3.90	9.79	7.13	7.37	7.93	6.15
###STOX2	8.39	8.71	8.03	7.64	9.27	4.41	4.72	3.54	4.30	6.96
###PADI2	8.41	8.26	8.45	9.20	5.59	4.59	5.36	4.13	4.91	4.08
###SCARNA5	7.65	5.78	10.63	5.91	8.80	5.89	5.52	3.82	4.04	7.95

### 计算PCA
pca.info <- fast.prcomp(data)
### 显示PCA计算结果前6行
head(pca.info$rotation)

### M1-M5为case，M6-M10为control
### 新建一个data.frame，包含所有样本信息和PC信息
pca.data <- data.frame (sample = row.names(pca.info$rotation),
						Type=c(rep("Case", 5), rep("Control", 5)),
						pca.info$rotation)

scatterplot3d(pca.data[, c("PC1","PC2","PC3")])

######################初级调整#############################
### 绘制PCA散点图
### 根据分组增加点的颜色
colors.lib <- c("#CC0000", "#1d419b")
colors <- colors.lib[as.numeric(pca.data$Type)]
scatterplot3d(pca.data[, c("PC1","PC2","PC3")], pch=16, color=colors)

######################中级调整#############################
### 绘制PCA散点图
### 旋转三维图，并更改点的大小
scatterplot3d(pca.data[, c("PC1","PC2","PC3")], pch=16, color=colors，
			angle=60, cex.symbols=2, main="PCA plot")

### 增加坐标轴信息
### 改变点的形状
shapes.lib=c(16, 17)
shapes <- shapes.lib[as.numeric(pca.data$Type)]
scatterplot3d(pca.data[, c("PC1","PC2","PC3")], pch=shapes, color=colors，
			angle=60, cex.symbols=2, main="PCA plot")

######################高级调整##############################
###增加图注
s3d <- scatterplot3d(pca.data[, c("PC1","PC2","PC3")], pch=shapes, color=colors，
			angle=60, cex.symbols=2, main="PCA plot")
legend("bottom", legend=levels(pca.data$Type), col=colors.lib, pch=shapes.lib, inset=-0.25, xpd=TRUE, horiz=TRUE)

######################终极调整##############################
### 标注样本名称
text(s3d$xyz.convert(pca.data[, c("PC1","PC2","PC3")] + 0.05), labels=pca.data$sample,cex=1,col="black")
### 标注特定样本名称
lab.sample <- c("M4","M1","M7","M10")
pca.data$Label=""
pca.data$Label[match(lab.sample, pca.data$sample)] <- lab.sample
s3d <- scatterplot3d(pca.data[, c("PC1","PC2","PC3")], pch=shapes, color=colors，
			angle=70, cex.symbols=2, main="PCA plot")
legend("bottom", legend=levels(pca.data$Type), col=colors.lib, pch=shapes.lib, inset=-0.25, xpd=TRUE, horiz=TRUE)
text(s3d$xyz.convert(pca.data[, c("PC1","PC2","PC3")] + 0.05), labels=pca.data$Label,cex=1,col="black")
