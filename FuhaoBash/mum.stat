#!/bin/bash
RootDir=$(cd `dirname $(readlink -f $0)`; pwd)
if [ ! -z $(uname -m) ]; then
	machtype=$(uname -m)
elif [ ! -z "$MACHTYPE" ]; then
	machtype=$MACHTYPE
else
	echo "Warnings: unknown MACHTYPE" >&2
fi

#export NUM_THREADS=`grep -c '^processor' /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 1`;
ProgramName=${0##*/}
echo -e "\n\n\n"
echo "MachType: $machtype"
echo "RootPath: $RootDir"
echo "ProgName: $ProgramName"
RunPath=$PWD
echo "RunDir: $RunPath"

################# help message ######################################
help() {
cat<<HELP

$0 --- Brief Introduction

Version: 20171127

Requirements:
	None

Descriptions:
	Map short query to long reference and draw plots

Options:
  -h    Print this help message
  -q    Query sequence file in Fasta format
  -r    Reference sequence file in Fasta format
  -i    Minimum percentage
  -c    nucmer -c min_cluster
  -l    delta-filter -l min alignment length
  -o    Prefix for PNG file, Default: output


Example:
  $0 mum.stat -r refernce.fa -q query.fa -o png.name


Author:
  Fu-Hao Lu
  Post-Doctoral Scientist in Micheal Bevan laboratory
  Cell and Developmental Department, John Innes Centre
  Norwich NR4 7UH, United Kingdom
  E-mail: Fu-Hao.Lu@jic.ac.uk

HELP
exit 0
}
[ -z "$1" ] && help
[ "$1" = "-h" ] || [ "$1" = "--help" ] && help
#################### Environments ###################################
echo -e "\n######################\nProgram initializing ...\n######################\n"
#echo "Adding $RunDir/bin into PATH"
#export PATH=$RunDir/bin:$RunDir/utils/bin:$PATH

#################### Initializing ###################################
opt_r=''
opt_q=''
opt_o='output'
opt_i=0
opt_c=100
opt_l=100
#################### Parameters #####################################
while [ -n "$1" ]; do
  case "$1" in
    -h) help;shift 1;;
    -r) opt_r=$2;shift 2;;
    -q) opt_q=$2;shift 2;;
    -i) opt_i=$2;shift 2;;
    -o) opt_o=$2;shift 2;;
    -c) opt_c=$2;shift 2;;
    -l) opt_l=$2;shift 2;;
    --) shift;break;;
    -*) echo "Error: no such option $1. -h for help" > /dev/stderr;exit 1;;
    *) break;;
  esac
done


#################### Subfuctions ####################################
###Detect command existence
CmdExists () {
  if command -v $1 >/dev/null 2>&1; then
    echo 0
  else
    echo 1
  fi
}

###Usage: array=(`split delimiter string`)
split () {
	local separator=$1
	local mystring=$2
	echo $mystring | sed -e "s/$separator/\n/g"
}

#Usage: string=$(join delimiter array)
join () {
        local separator=$1
        shift 1
        local -a array=(`echo $@`)
        local returnstr=$(printf "$separator%s" "${array[@]}")
        returnstr=${returnstr:1}
        echo $returnstr
}
abs2rel () { perl -MFile::Spec -e 'print(File::Spec->abs2rel($ARGV[1], $ARGV[0]), "\n")' "$@"; }


#################### Command test ###################################
echo "Info: check CMD..."
if [ $(CmdExists 'nucmer') -ne 0 ]; then
	echo "Error: CMD 'nucmer' in PROGRAM 'MUMmerplot' is required but not found.  Aborting..." >&2 
	exit 127
fi
if [ $(CmdExists 'delta-filter') -ne 0 ]; then
	echo "Error: CMD 'delta-filter' in PROGRAM 'MUMmerplot' is required but not found.  Aborting..." >&2 
	exit 127
fi
if [ $(CmdExists 'mummerplot') -ne 0 ]; then
	echo "Error: CMD 'mummerplot' in PROGRAM 'MUMmerplot' is required but not found.  Aborting..." >&2 
	exit 127
fi



#################### Defaults #######################################




#################### Input and Output ###############################
echo "Info: check Files..."
if [ -z "$opt_r" ] || [ ! -s "$opt_r" ]; then
	echo "Error: invalid file for reference sequece fasta" >&2;
	exit 1;
fi
if [ -z "$opt_q" ] || [ ! -s "$opt_q" ]; then
	echo "Error: invalid file for query sequece fasta" >&2;
	exit 1;
fi
if [ -z "$opt_o" ]; then
	echo "Error: invalid output prefix" >&2;
	exit 1;
fi



#################### Main ###########################################
echo -e "\n\n\n"
echo "Step1: nucmer..."
nucmer -c $opt_c -p $opt_o $opt_r $opt_q
if [ $? -ne 0 ] || [ ! -s "$opt_o.delta" ]; then
	echo "Error1: nucmer running or output error" >&2
	exit 1
fi
echo -e "\n\n\n"
echo "Step2: delta-filter..."
delta-filter -i $opt_i -l $opt_l -q $opt_o.delta > $opt_o.filter.q
if [ $? -ne 0 ] || [ ! -s "$opt_o.filter.q" ]; then
	echo "Error2: delta-filter running or output error" >&2
	exit 1
fi
echo -e "\n\n\n"
echo "Step3: mummerplot..."
mummerplot --large -p=$opt_o --png $opt_o.filter.q
if [ $? -ne 0 ] || [ ! -s "$opt_o.png" ]; then
	echo "Error3: mummerplot running or output error" >&2
	exit 1
fi
